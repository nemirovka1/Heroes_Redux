{"version":3,"sources":["hooks/http.hook.js","components/heroesList/heroesSlice.js","components/heroesListItem/HeroesListItem.js","components/spinner/Spinner.js","components/heroesList/HeroesList.js","components/heroesAddForm/HeroesAddForm.js","components/heroesFilters/filtersSlice.js","components/heroesFilters/HeroesFilters.js","components/app/App.js","store/index.js","index.js"],"names":["useHttp","request","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","fetchHeroes","createAsyncThunk","heroesSlice","createSlice","name","initialState","heroes","heroesLoadingStatus","reducers","createNewHero","state","action","push","payload","heroesDelete","filter","item","id","extraReducers","builder","addCase","pending","fulfilled","rejected","addDefaultCase","actions","reducer","heroesFetching","heroesFetched","heroesFetchingError","HeroesListItem","elementClassName","description","element","remove","className","src","alt","style","type","aria-label","onClick","Spinner","role","HeroesList","filteredHeroesSelector","createSelector","filters","activeFilter","elem","filteredHeroes","useSelector","dispatch","useDispatch","useEffect","arr","elements","length","map","props","then","console","log","catch","err","onDeleteHeroes","HeroesAddForm","useState","heroName","setHeroName","heroDescription","setHeroDescription","heroSkill","setHeroSkill","filtersLoadingStatus","onSubmit","event","preventDefault","newHero","uuidv4","JSON","stringify","error","htmlFor","required","value","placeholder","onChange","target","label","renderFilters","fetchFilters","filtersSlice","activeFilterChanged","filtreFetchingError","filterFetched","filterFetching","HeroesFilters","btnClass","classNames","App","stringMiddleweare","next","store","configureStore","middleware","getDefaultMiddleware","concat","devTools","process","Node_ENV","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c5006e5.chunk.js","sourcesContent":["\n\nexport const useHttp = () => {\n    const request = async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n        } catch(e) {\n           \n            throw e;\n        }\n    };\n    return {request}\n}","import { createSlice,createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport {useHttp} from '../../hooks/http.hook';\r\n\r\nconst initialState = {\r\n    heroes: [],\r\n    heroesLoadingStatus: 'idle'\r\n}\r\n\r\nexport const fetchHeroes = createAsyncThunk(\r\n    'heroes/fetchHeroes',\r\n    async ()=>{\r\n        const {request} = useHttp();\r\n        return await request(\"http://localhost:3001/heroes\",\"GET\");\r\n    }\r\n);\r\n\r\nconst heroesSlice = createSlice({\r\n    name: 'heroes',\r\n    initialState,\r\n    reducers: {\r\n        createNewHero: (state, action) => {\r\n            state.heroes.push(action.payload);\r\n        },\r\n        heroesDelete: (state, action) => {\r\n            state.heroes = state.heroes.filter(item => item.id !== action.payload);\r\n        }\r\n    },\r\n    extraReducers:(builder)=>{\r\n        builder\r\n            .addCase(fetchHeroes.pending,state => {state.heroesLoadingStatus = 'loading'})\r\n            .addCase(fetchHeroes.fulfilled,(state, action) => {\r\n                state.heroesLoadingStatus = 'idle';\r\n                state.heroes = action.payload;\r\n            })\r\n            .addCase(fetchHeroes.rejected,state => {\r\n                state.heroesLoadingStatus = 'error';\r\n            })\r\n            .addDefaultCase(()=>{})\r\n    }\r\n});\r\n\r\nconst {actions, reducer} = heroesSlice;\r\n\r\nexport default reducer;\r\nexport const {\r\n    heroesFetching,\r\n    heroesFetched,\r\n    heroesFetchingError,\r\n    createNewHero,\r\n    heroesDelete\r\n} = actions;\r\n\r\n\r\n\r\n","\nconst HeroesListItem = ({name, description, element,remove}) => {\n\n    let elementClassName;\n\n    switch (element) {\n        case 'fire':\n            elementClassName = 'bg-danger bg-gradient';\n            break;\n        case 'water':\n            elementClassName = 'bg-primary bg-gradient';\n            break;\n        case 'wind':\n            elementClassName = 'bg-success bg-gradient';\n            break;\n        case 'earth':\n            elementClassName = 'bg-secondary bg-gradient';\n            break;\n        default:\n            elementClassName = 'bg-warning bg-gradient';\n    }\n\n    return (\n        <li \n            className={`card flex-row mb-4 shadow-lg text-white ${elementClassName}`}>\n            <img src=\"http://www.stpaulsteinbach.org/wp-content/uploads/2014/09/unknown-hero.jpg\" \n                 className=\"img-fluid w-25 d-inline\" \n                 alt=\"unknown hero\" \n                 style={{'objectFit': 'cover'}}/>\n            <div className=\"card-body\">\n                \n                <h3 className=\"card-title\">{name}</h3>\n                <p className=\"card-text\">{description}</p>\n            </div>\n            <span className=\"position-absolute top-0 start-100 translate-middle badge border rounded-pill bg-light\">\n                <button type=\"button\" className=\"btn-close btn-close\" aria-label=\"Close\" onClick={remove}></button>\n            </span>\n        </li>\n    )\n}\n\nexport default HeroesListItem;","\nconst Spinner = () => {\n    return (\n        <div className=\"spinner-border mx-auto mt-5\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </div>\n    )\n}\n\nexport default Spinner;","import {useHttp} from '../../hooks/http.hook';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {createSelector} from '@reduxjs/toolkit';\nimport { heroesDelete, fetchHeroes } from './heroesSlice';\nimport HeroesListItem from \"../heroesListItem/HeroesListItem\";\nimport Spinner from '../spinner/Spinner';\n\nconst HeroesList = () => {\n   const filteredHeroesSelector=createSelector(\n        (state)=>state.filters.activeFilter,\n        (state)=>state.heroes.heroes,\n        (filter,heroes)=>{\n            if (filter === 'all') {\n                return heroes;\n            } else {\n                return heroes.filter(elem=>elem.element===filter)\n            }\n        }\n   )\n    const filteredHeroes=useSelector(filteredHeroesSelector)\n    const dispatch = useDispatch();\n    const {request} = useHttp();\n    const heroesLoadingStatus = useSelector(state => state.heroes.filteredHeroes);\n    useEffect(() => {\n        dispatch(fetchHeroes());\n    }, []);\n\n    if (heroesLoadingStatus === \"loading\") {\n        return <Spinner/>;\n    } else if (heroesLoadingStatus === \"error\") {\n        return <h5 className=\"text-center mt-5\">Ошибка загрузки</h5>\n    }\n    const onDeleteHeroes=(id)=>{\n        request(`http://localhost:3001/heroes/${id}`, \"DELETE\")\n        .then(data => console.log(data, 'Deleted'))\n        .then(dispatch(heroesDelete(id)))\n        .catch(err => console.log(err));\n    }\n    const renderHeroesList = (arr) => {\n        if (arr.length === 0) {\n            return <h5 className=\"text-center mt-5\">Героев пока нет</h5>\n        }\n\n        return arr.map(({id, ...props}) => {\n            return <HeroesListItem key={id} {...props} remove={()=>onDeleteHeroes(id)}/>\n        })\n    }\n    const elements = renderHeroesList(filteredHeroes);\n    return (\n        <ul>\n            {elements}\n        </ul>\n    )\n}\n\nexport default HeroesList;","import { useState } from \"react\";\nimport { useDispatch ,useSelector} from \"react-redux\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { createNewHero } from \"../heroesList/heroesSlice\";\nimport { useHttp } from \"../../hooks/http.hook\";\n\nconst HeroesAddForm = () => {\n    const [heroName,setHeroName]=useState('');\n    const [heroDescription,setHeroDescription]=useState('');\n    const [heroSkill,setHeroSkill]=useState('');\n\n    const {filters, filtersLoadingStatus} = useSelector(state => state.filters);\n    const dispatch = useDispatch();\n    const {request} = useHttp();\n\n    const createNewHeroes=(event)=>{\n        event.preventDefault()\n\n        const newHero={\n            id:uuidv4(),\n            name:heroName,\n            description:heroDescription,\n            element:heroSkill\n        }\n\n        request(\"http://localhost:3001/heroes\", \"POST\", JSON.stringify(newHero))\n                .then(response=>console.log(response,'Успешно'))\n                .then(dispatch(createNewHero(newHero)))\n                .catch(error=>console.log(error));\n\n        setHeroName('');\n        setHeroDescription('');\n        setHeroSkill('');\n}\n\n    const renderFilters=(filters,status)=>{\n        if (status === \"loading\") {\n            return <option>Загрузка элементов</option>\n        } else if (status === \"error\") {\n            return <option>Ошибка загрузки</option>\n        }\n        \n        if (filters && filters.length > 0 ) {\n            return filters.map(({name, label}) => {\n                if (name === 'all')  return;\n                return <option key={name} value={name}>{label}</option>\n            })\n        }\n    }\n\n    return (\n        <form className=\"border p-4 shadow-lg rounded\" onSubmit={createNewHeroes}>\n            <div className=\"mb-3\">\n                <label htmlFor=\"name\" className=\"form-label fs-4\">Имя нового героя</label>\n                <input \n                    required\n                    type=\"text\" \n                    name=\"name\" \n                    value={heroName}\n                    className=\"form-control\" \n                    id=\"name\" \n                    placeholder=\"Как меня зовут?\"\n                    onChange={(event)=>setHeroName(event.target.value)}/>\n            </div>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"text\" className=\"form-label fs-4\">Описание</label>\n                <textarea\n                    required\n                    name=\"text\" \n                    value={heroDescription}\n                    className=\"form-control\" \n                    id=\"text\" \n                    placeholder=\"Что я умею?\"\n                    style={{\"height\": '130px'}}\n                    onChange={(event)=>setHeroDescription(event.target.value)}/>\n            </div>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"element\" className=\"form-label\">Выбрать элемент героя</label>\n                <select \n                    required\n                    className=\"form-select\" \n                    value={heroSkill}\n                    id=\"element\" \n                    name=\"element\"\n                    onChange={(event)=>setHeroSkill(event.target.value)}>\n                    <option >Я владею элементом...</option>\n                    {renderFilters(filters,filtersLoadingStatus)}\n                </select>\n            </div>\n\n            <button type=\"submit\" className=\"btn btn-primary\">Создать</button>\n        </form>\n    )\n}\n\nexport default HeroesAddForm;","import { createSlice,createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport { useHttp } from \"../../hooks/http.hook\";\r\n\r\nconst initialState = {\r\n    filters: [],\r\n    filtersLoadingStatus:'idle',\r\n    activeFilter:'all'\r\n}\r\n\r\nexport const fetchFilters =createAsyncThunk(\r\n    'filters/fetchFilters',\r\n    async ()=>{\r\n        const {request}=useHttp();\r\n        return await request(\"http://localhost:3001/filters\");\r\n    }\r\n)\r\n\r\nconst filtersSlice=createSlice({\r\n    name:'filters',\r\n    initialState,\r\n    reducers : {\r\n        activeFilterChanged:(state,action)=>{\r\n            state.activeFilter= action.payload;\r\n        }\r\n    },\r\n    extraReducers:(builder)=>{\r\n        builder\r\n            .addCase(fetchFilters.pending,state=>{state.filtersLoadingStatus='loading'})\r\n            .addCase(fetchFilters.fulfilled,(state,action)=>{\r\n                state.filtersLoadingStatus='idle';\r\n                state.filters=action.payload\r\n            })\r\n            .addCase(fetchFilters.rejected,state=>{\r\n                state.filtersLoadingStatus='error';\r\n            })\r\n            .addDefaultCase(()=>{})\r\n    }\r\n});\r\n\r\nconst {actions,reducer}=filtersSlice;\r\n\r\nexport default reducer;\r\n\r\nexport const {\r\n    activeFilterChanged,\r\n    filtreFetchingError,\r\n    filterFetched,\r\n    filterFetching\r\n}=actions;\r\n    \r\n","import { useEffect } from \"react\";\nimport {useHttp} from '../../hooks/http.hook';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { activeFilterChanged, fetchFilters } from \"./filtersSlice\";\nimport classNames from 'classnames';\nimport Spinner from '../spinner/Spinner';\n\nconst HeroesFilters = () => {\n\n    const {filters, filtersLoadingStatus, activeFilter} = useSelector(state => state.filters);\n    const dispatch = useDispatch();\n    const {request} = useHttp();\n    useEffect(() => {\n        dispatch(fetchFilters(request));\n    }, []);\n\n    if (filtersLoadingStatus === \"loading\") {\n        return <Spinner/>;\n    } else if (filtersLoadingStatus === \"error\") {\n        return <h5 className=\"text-center mt-5\">Ошибка загрузки</h5>\n    }\n\n    const renderFilters = (arr) => {\n        if (arr.length === 0) {\n            return <h5 className=\"text-center mt-5\">Фильтры не найдены</h5>\n        }\n        return arr.map(({name, className, label}) => {\n\n            const btnClass = classNames('btn', className, {\n                'active': name === activeFilter\n            });\n            \n            return <button \n                        key={name} \n                        id={name} \n                        className={btnClass}\n                        onClick={() => dispatch(activeFilterChanged(name))}\n                        >{label}</button>\n        })\n    }\n\n    const elements = renderFilters(filters);\n\n    return (\n        <div className=\"card shadow-lg mt-4\">\n            <div className=\"card-body\">\n                <p className=\"card-text\">Отфильтруйте героев по элементам</p>\n                <div className=\"btn-group\">\n                    {elements}\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default HeroesFilters;","import HeroesList from '../heroesList/HeroesList';\nimport HeroesAddForm from '../heroesAddForm/HeroesAddForm';\nimport HeroesFilters from '../heroesFilters/HeroesFilters';\n\nimport './app.scss';\n\nconst App = () => {\n    \n    return (\n        <main className=\"app\">\n            <div className=\"content\">\n                <HeroesList/>\n                <div className=\"content__interactive\">\n                    <HeroesAddForm/>\n                    <HeroesFilters/>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nexport default App;","import {configureStore} from '@reduxjs/toolkit';\nimport filters from '../components/heroesFilters/filtersSlice';\nimport heroes from '../components/heroesList/heroesSlice';\n// import heroes from '../reducers/heroes';\n\nconst stringMiddleweare=()=>(next)=>(action)=>{\n    if (typeof action === 'string'){\n        return next ({\n            type:action\n        })\n    }\n    return next(action)\n}\n\n// const store =createStore(\n//                 combineReducers({heroes,filters}),\n//                 compose(applyMiddleware(ReduxThunk, stringMiddleweare),\n//                 window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n//                 )\n\nconst store=configureStore({\n    reducer: {heroes,filters},\n    middleware: getDefaultMiddleware => getDefaultMiddleware().concat(stringMiddleweare),\n    devTools:process.env.Node_ENV !=='production',\n    \n})\n\nexport default store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/app/App';\nimport store from './store';\n\nimport './styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}